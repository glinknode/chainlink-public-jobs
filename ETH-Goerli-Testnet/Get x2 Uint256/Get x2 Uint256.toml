type = "directrequest"
schemaVersion = 1
name = "GLINK-ETH-GOERLI [DR] (Get > x2 Uint256)"
externalJobID = "e35ba51d-6ac1-4220-b2e5-554e5e1a97a5"
forwardingAllowed = false
maxTaskDuration = "0s"
contractAddress = "0x6c2e87340Ef6F3b7e21B2304D6C057091814f25E"
minContractPaymentLinkJuels = "0"
observationSource = """
    decode_log   [type="ethabidecodelog"
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                  data="$(jobRun.logData)"
                  topics="$(jobRun.logTopics)"]

    decode_cbor     [type="cborparse" data="$(decode_log.data)"]
    fetch           [type="http" method=GET url="$(decode_cbor.get)"]
    parse1          [type="jsonparse" path="$(decode_cbor.path1)" data="$(fetch)"]
    parse2          [type="jsonparse" path="$(decode_cbor.path2)" data="$(fetch)"]
    multiply1       [type="multiply" input="$(parse1)" times="$(decode_cbor.times)"]
    multiply2       [type="multiply" input="$(parse2)" times="$(decode_cbor.times)"]
    encode_data     [type="ethabiencode" abi="(bytes32 requestId, uint256 _Value1, uint256 _Value2)" data="{ \\"requestId\\": $(decode_log.requestId), \\"_Value1\\": $(multiply1), \\"_Value2\\": $(multiply2)}"]
    encode_tx       [type="ethabiencode"
                      abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                      data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"
                    ]
    submit_tx    [type="ethtx" to="0x6c2e87340Ef6F3b7e21B2304D6C057091814f25E" data="$(encode_tx)"]

    decode_log -> decode_cbor -> fetch -> parse1 -> multiply1 -> parse2 -> multiply2 -> encode_data -> encode_tx -> submit_tx
"""

